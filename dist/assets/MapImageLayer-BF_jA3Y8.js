import{bn as I,dM as T,bo as $,dN as O,dn as E,dp as M,dq as R,dm as P,dO as F,dP as L,aT as U,dE as v,dQ as f,dR as x,dS as j,dT as q,dU as N,C as b,M as J,dV as A,dW as _,dX as k,s as S,O as V,k as s,y as n,dY as w,t as Z,u as z,dt as C,q as W,br as B,dZ as D}from"./index-D51AduEB.js";import{m as G,f as H,Y as K}from"./SublayersOwner-D_Ldz7Pi.js";import{t as Y}from"./imageBitmapUtils-Dt48A4Gj.js";import"./QueryTask-DseZhRb_.js";import"./infoFor3D-DsOdlPuA.js";import"./executeForIds-Bi9URoyj.js";import"./query-Ckqfxw8P.js";import"./pbfQueryUtils-gM-pxrTV.js";import"./pbf-DNsa0Q8Z.js";import"./OptimizedGeometry-DLPswkPy.js";import"./OptimizedFeature-CXeSoBCN.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./executeQueryJSON-dC_gLmmR.js";import"./executeQueryPBF-CP2aTTx2.js";import"./featureConversionUtils-DKlHm2Hy.js";let r=class extends I(T($(G(H(O(E(M(R(P(F(L(B)))))))))))){constructor(...e){super(...e),this.dateFieldsTimeZone=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeZone=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,i){return typeof e=="string"?{url:e,...i}:e}load(e){const i=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(U).then(()=>this._fetchService(i))),Promise.resolve(this)}readImageFormat(e,i){const l=i.supportedImageFormatTypes;return l&&l.includes("PNG32")?"png32":"png24"}writeSublayers(e,i,l,t){var h,m,y;if(!this.loaded||!e)return;const a=e.slice().reverse().flatten(({sublayers:o})=>o&&o.toArray().reverse()).toArray();let p=!1;if((h=this.capabilities)!=null&&h.operations.supportsExportMap&&((y=(m=this.capabilities)==null?void 0:m.exportMap)!=null&&y.supportsDynamicLayers)){const o=v(t.origin);if(o===f.PORTAL_ITEM){const g=this.createSublayersForOrigin("service").sublayers;p=x(a,g,f.SERVICE)}else if(o>f.PORTAL_ITEM){const g=this.createSublayersForOrigin("portal-item");p=x(a,g.sublayers,v(g.origin))}}const d=[],u={writeSublayerStructure:p,...t};let c=p;a.forEach(o=>{const g=o.write({},u);d.push(g),c=c||o.originOf("visible")==="user"}),d.some(o=>Object.keys(o).length>1)&&(i.layers=d),c&&(i.visibleLayers=a.filter(o=>o.visible).map(o=>o.id))}createExportImageParameters(e,i,l,t){const a=(t==null?void 0:t.pixelRatio)||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian());const p=new j({layer:this,floors:t==null?void 0:t.floors,scale:q({extent:e,width:i})*a}),d=p.toJSON();p.destroy();const u=!(t!=null&&t.rotation)||this.version<10.3?{}:{rotation:-t.rotation},c=e==null?void 0:e.spatialReference,h=N(c);d.dpi*=a;const m={};if(t!=null&&t.timeExtent){const{start:y,end:o}=t.timeExtent.toJSON();m.time=y&&o&&y===o?""+y:`${y??"null"},${o??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(m.time="null,null");return{bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:h,imageSR:h,size:i+","+l,...d,...u,...m}}async fetchImage(e,i,l,t){const{data:a}=await this._fetchImage("image",e,i,l,t);return a}async fetchImageBitmap(e,i,l,t){const{data:a,url:p}=await this._fetchImage("blob",e,i,l,t);return Y(a,p,t==null?void 0:t.signal)}async fetchRecomputedExtents(e={}){const i={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:l}=await b(this.url,i),{extent:t,fullExtent:a,timeExtent:p}=l,d=t||a;return{fullExtent:d&&J.fromJSON(d),timeExtent:p&&A.fromJSON({start:p[0],end:p[1]})}}loadAll(){return _(this,e=>{e(this.allSublayers)})}serviceSupportsSpatialReference(e){return k(this,e)}async _fetchImage(e,i,l,t,a){var u,c,h;const p={responseType:e,signal:(a==null?void 0:a.signal)??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(i,l,t,a),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},d=this.parsedUrl.path+"/export";if(((u=p.query)==null?void 0:u.dynamicLayers)!=null&&!((h=(c=this.capabilities)==null?void 0:c.exportMap)!=null&&h.supportsDynamicLayers))throw new S("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:p.query});try{const{data:m}=await b(d,p);return{data:m,url:d}}catch(m){throw V(m)?m:new S("mapimagelayer:image-fetch-error",`Unable to load image: ${d}`,{error:m})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:i,ssl:l}=await b(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});l&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=i,this.read(i,{origin:"service",url:this.parsedUrl})}};s([n(w("dateFieldsTimeReference"))],r.prototype,"dateFieldsTimeZone",void 0),s([n({type:Boolean})],r.prototype,"datesInUnknownTimezone",void 0),s([n()],r.prototype,"dpi",void 0),s([n()],r.prototype,"gdbVersion",void 0),s([n()],r.prototype,"imageFormat",void 0),s([Z("imageFormat",["supportedImageFormatTypes"])],r.prototype,"readImageFormat",null),s([n({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],r.prototype,"imageMaxHeight",void 0),s([n({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],r.prototype,"imageMaxWidth",void 0),s([n()],r.prototype,"imageTransparency",void 0),s([n({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],r.prototype,"isReference",void 0),s([n({json:{read:!1,write:!1}})],r.prototype,"labelsVisible",void 0),s([n({type:["ArcGISMapServiceLayer"]})],r.prototype,"operationalLayerType",void 0),s([n({json:{read:!1,write:!1}})],r.prototype,"popupEnabled",void 0),s([n(w("preferredTimeReference"))],r.prototype,"preferredTimeZone",void 0),s([n()],r.prototype,"sourceJSON",void 0),s([n({json:{write:{ignoreOrigin:!0}}})],r.prototype,"sublayers",void 0),s([z("sublayers",{layers:{type:[K]},visibleLayers:{type:[D]}})],r.prototype,"writeSublayers",null),s([n({type:["show","hide","hide-children"]})],r.prototype,"listMode",void 0),s([n({json:{read:!1},readOnly:!0,value:"map-image"})],r.prototype,"type",void 0),s([n(C)],r.prototype,"url",void 0),r=s([W("esri.layers.MapImageLayer")],r);const he=r;export{he as default};
